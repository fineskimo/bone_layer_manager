import bpy
import random
import string
from bpy.props import StringProperty, EnumProperty, BoolProperty
from .blmfuncs import ShowMessageBox
from bpy_extras.io_utils import ExportHelper
import os


class WRITEUI_OT_writeui(bpy.types.Operator, ExportHelper):
    # Create Rig UI script file from current layout
    bl_idname = "bone_layer_man.write_rig_ui"
    bl_label = "Export UI"
    bl_description = "Export Rig UI script from current layout"

    filename_ext = ".py"

    filter_glob = StringProperty(
        default="*.obj",
        options={'HIDDEN'},
        )

    blm_rig_id: StringProperty(name="BLM Rig ID",
                               description="Rig ID Used by Bone Layer Manager",
                               default="")

    rig_ui_pname: StringProperty(name="Rig UI Panel",
                                 description="Rig UI panel header name",
                                 default="Rig UI")

    rig_cp_pname: StringProperty(name="Rig Properties Panel",
                                 description="Rig Properties panel header namer",
                                 default="Rig Properties")

    use_item_panel: BoolProperty(
        name="Add to 'Item' tab",
        description="Add to 'Item' tab or created dedicated 'Rig UI' tab",
        default=True,
        )

    @classmethod
    def poll(self, context):
        return getattr(context.active_object, 'type', False) == 'ARMATURE'

    def draw(self, context):
        layout = self.layout
        row = layout.row()
        row.label(text="Rig Panel Options")
        row = layout.row()
        row.prop(self, "use_item_panel")
        row = layout.row()
        row.label(text="Rig UI panel name")
        row.prop(self, "rig_ui_pname", text='')
        row = layout.row()
        row.label(text="Rig Properties panel name")
        row.prop(self, "rig_cp_pname", text='')

    def execute(self, context):
        default_path = os.path.splitext(bpy.data.filepath)[0] + ".py"
        file_write = open(self.filepath, 'w').write
        ac_ob = context.active_object
        scn = context.scene
        layout = self.layout
        blockstart = True
        endblock = False

        if self.use_item_panel:
            panel_loc = 'Item'
        else:
            panel_loc = 'Rig UI'

        rig_ui_pname = self.rig_ui_pname

        rig_cp_pname = self.rig_cp_pname

        # generate random id for rig
        new_rig_id = ''.join([random.choice(string.ascii_lowercase + string.digits) for _ in range(12)])

        # Check for Rig ID and assign if not present
        try:
            set_rig_id = ac_ob.data['blm_rig_id']
        except:
            ac_ob.data['blm_rig_id'] = new_rig_id

        set_rig_id = ac_ob.data['blm_rig_id']

        # text = bpy.data.texts.new('Rig_UI.py')

        ##############################

        file_write('### RigUI Script generated by Bone Layers Addon ###''\n'
                   '\n'
                   'import bpy''\n'
                   '\n'
                   f'blm_rig_id = "{set_rig_id}"\n'
                   '\n'
                   '\n'
                   f'class BLOP_PT_rigui_{set_rig_id}(bpy.types.Panel):''\n'
                   '\t'"bl_space_type = 'VIEW_3D'"'\n'
                   '\t'"bl_region_type = 'UI'"'\n'
                   '\t'f"bl_category = '{panel_loc}'"'\n'
                   '\t'f"bl_label = \"{rig_ui_pname}\""'\n'
                   # '\t'+("bl_idname = \"rig_"+str(set_rig_id)+".riglayers\"")+'\n'
                   '\t'f"bl_idname = \"BLOP_PT_rigui_{set_rig_id}\""'\n''\n'
                   '\t''@classmethod''\n'
                   '\t''def poll(self, context):''\n'
                   '\t''\t''try:''\n'
                   '\t''\t''\t''return (context.active_object.data.get(\"blm_rig_id\") == blm_rig_id)''\n'
                   '\t''\t''except (AttributeError, KeyError, TypeError):''\n'
                   '\t''\t''\t'"return False"'\n'
                   '\n'
                   '\t''def draw(self, context):''\n'
                   '\t''\t''layout = self.layout''\n'
                   '\t''\t''col = layout.column()''\n'
                   '\n')

        ##############################

        # Iterate through layers writing rows for the Rig UI
        for x in range(0, 32):
            blockstart = True

            for i in range(32):
                name_id_prop = f"layer_name_{i}"
                rigui_id_prop = f"rigui_id_{i}"
                name = ac_ob.data.get(name_id_prop, "*NO NAME*")
                uselayer = ac_ob.data.get(rigui_id_prop, -1)

                # Set start of UI row
                if uselayer == x and endblock is False:
                    if blockstart is True:
                        file_write('\n')
                        file_write('\t''\t'"row = col.row()"'\n')
                        blockstart = False

                    while uselayer < (x + 1):
                        if uselayer == (x + 1):
                            continue
                        file_write('\t''\t'f"row.prop(context.active_object.data,'layers', index={i}, toggle=True, text='{name}')"'\n')

                        uselayer += 1
                    # Mark end of current row in iteration
                    if i == 32:
                        endblock = True

        ###############################

        file_write(
            '\n'
            '\n'f"class BLOP_PT_customprops_{set_rig_id}(bpy.types.Panel):"'\n'
            '\t'f"bl_category = '{panel_loc}'"'\n'
            '\t'f"bl_label = \"{rig_cp_pname}\""'\n'
            '\t'f"bl_idname = \"BLOP_PT_customprops_{set_rig_id}\""'\n'
            '\t'"bl_space_type = 'VIEW_3D'"'\n'
            '\t'"bl_region_type = 'UI'"'\n'
            '\t'"bl_options = {'DEFAULT_CLOSED'}"'\n'
            '\n'
            '\t'"@classmethod"'\n'
            '\t'"def poll(self, context):"'\n'
            '\t''\t'"if context.mode != 'POSE':"'\n'
            '\t''\t''\t'"return False"'\n'
            '\n'
            '\t''\t'"try:"'\n'
            '\t''\t''\t'"return (context.active_object.type == 'ARMATURE')"'\n'
            '\t''\t'"except (TypeError):"'\n'
            '\t''\t''\t'"return False"'\n'
            '\n'
            '\t'"def draw(self, context):"'\n'
            '\t''\t'"layout = self.layout"'\n'
            '\t''\t'"pose_bones = context.active_object.pose.bones"'\n'
            '\t''\t'"try:"'\n'
            '\t''\t''\t'"selected_bones = [bone.name for bone in context.selected_pose_bones]"'\n'
            '\t''\t''\t'"selected_bones += [context.active_pose_bone.name]"'\n'
            '\t''\t'"except (AttributeError, TypeError):"'\n'
            '\t''\t''\t'"return"'\n'
            '\n'
            '\t''\t'"def assign_props(row, val, key):"'\n'
            '\t''\t''\t'"row.property = key"'\n'
            '\t''\t''\t'"row.data_path = \"active_pose_bone\""'\n'
            '\t''\t''\t'"try:"'\n'
            '\t''\t''\t''\t'"row.value = str(val)"'\n'
            '\t''\t''\t'"except:"'\n'
            '\t''\t''\t''\t'"pass"'\n'
            '\t''\t'"active_pose_bone = context.active_pose_bone"'\n'
            '\n'
            '\t''\t'"rna_properties = {"'\n'
            '\t''\t''\t'"prop.identifier for prop in bpy.types.PoseBone.bl_rna.properties"'\n'
            '\t''\t''\t'"if prop.is_runtime"'\n'
            '\t''\t'"}"'\n'
            '\t'"# Iterate through selected bones add each prop property of each bone to the panel."'\n'
            '\n'
            '\t''\t'"for bone in context.selected_pose_bones:"'\n'
            '\t''\t''\t'"if len(bone.keys()) > 1:"'\n'
            '\t''\t''\t''\t'"box = layout.box()"'\n'
            '\t''\t''\t'"for key in sorted(bone.keys()):"'\n'
            '\t''\t''\t''\t'"if key != '_RNA_UI' and key not in rna_properties:"'\n'
            '\t''\t''\t''\t''\t'"val = bone.get(key, \"value\")"'\n'
            '\t''\t''\t''\t''\t'"row = box.row()"'\n'
            '\t''\t''\t''\t''\t'"split = row.split(align=True, factor=0.7)"'\n'
            '\t''\t''\t''\t''\t'"row = split.row(align=True)"'\n'
            '\t''\t''\t''\t''\t'"row.label(text=key, translate=False)"'\n'
            '\t''\t''\t''\t''\t'"row = split.row(align=True)"'\n'
            '\t''\t''\t''\t''\t'"row.prop(bone, f'[\"{key}\"]', text = \"\", slider=True)"'\n'
            )

        ##############################

        file_write('\n''\n'f"classes = (BLOP_PT_rigui_{set_rig_id}, BLOP_PT_customprops_{set_rig_id}, )"'\n''\n')

        file_write('register, unregister = bpy.utils.register_classes_factory(classes)''\n''\n')

        file_write("if __name__ == \"__main__\":"'\n')

        file_write('\t''register()')

        ShowMessageBox("Script generated successfully", "Bone Layer Manager")

        return {'FINISHED'}
